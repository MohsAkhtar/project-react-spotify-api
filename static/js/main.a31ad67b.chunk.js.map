{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","token","deviceId","loggedIn","error","trackName","artistName","albumName","playing","position","duration","playerCheckInterval","_this2","setState","setInterval","checkForPlayer","window","Spotify","clearInterval","player","Player","name","getOAuthToken","cb","createEventHandlers","connect","_this3","on","e","console","onStateChanged","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","device_id","wrap","_context","prev","next","log","transferPlaybackHere","stop","_x","apply","arguments","_state$track_window","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","previousTrack","togglePlay","nextTrack","_this$state","fetch","method","headers","authorization","concat","Content-Type","body","JSON","stringify","device_ids","play","_this4","_this$state2","react_default","createElement","className","onClick","onPrevCick","onPlayClick","onNextClick","href","type","value","onChange","target","handleLogin","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a31ad67b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      token: '',\r\n      deviceId: '',\r\n      loggedIn: false,\r\n      error: '',\r\n      trackName: 'Track Name',\r\n      artistName: 'Artist Name',\r\n      albumName: 'Album Name',\r\n      playing: false,\r\n      position: 0,\r\n      duration: 0\r\n    };\r\n    this.playerCheckInterval = null;\r\n  }\r\n\r\n  handleLogin() {\r\n    if (this.state.token !== '') {\r\n      this.setState({ loggedIn: true });\r\n      // check every second for the player\r\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\r\n    }\r\n  }\r\n\r\n  checkForPlayer() {\r\n    const { token } = this.state;\r\n\r\n    if (window.Spotify !== null) {\r\n      // cancel the interval\r\n      clearInterval(this.playerCheckInterval);\r\n\r\n      this.player = new window.Spotify.Player({\r\n        name: \"Mohs's Spotify Player\",\r\n        getOAuthToken: cb => {\r\n          cb(token);\r\n        }\r\n      });\r\n\r\n      this.createEventHandlers();\r\n\r\n      // finally, connect!\r\n      this.player.connect();\r\n    }\r\n  }\r\n\r\n  createEventHandlers() {\r\n    this.player.on('initialization_error', e => {\r\n      console.error(e);\r\n    });\r\n    this.player.on('authentication_error', e => {\r\n      console.error(e);\r\n      this.setState({ loggedIn: false });\r\n    });\r\n    this.player.on('account_error', e => {\r\n      console.error(e);\r\n    });\r\n    this.player.on('playback_error', e => {\r\n      console.error(e);\r\n    });\r\n\r\n    // Playback status updates\r\n    this.player.on('player_state_changed', state => {\r\n      this.onStateChanged(state);\r\n    });\r\n\r\n    // Ready\r\n    this.player.on('ready', async data => {\r\n      let { device_id } = data;\r\n      console.log('Enjoy the sound!');\r\n      await this.setState({ deviceId: device_id });\r\n      this.transferPlaybackHere();\r\n    });\r\n  }\r\n\r\n  onStateChanged(state) {\r\n    // if no longer listening to music, we get null state\r\n    if (state !== null) {\r\n      const {\r\n        current_track: currentTrack,\r\n        position,\r\n        duration\r\n      } = state.track_window;\r\n      const trackName = currentTrack.name;\r\n      const albumName = currentTrack.album.name;\r\n      const artistName = currentTrack.artists\r\n        .map(artist => artist.name)\r\n        .join(', ');\r\n      const playing = !state.paused;\r\n      this.setState({\r\n        position,\r\n        duration,\r\n        trackName,\r\n        albumName,\r\n        artistName,\r\n        playing\r\n      });\r\n    }\r\n  }\r\n\r\n  // play control methods\r\n  onPrevCick() {\r\n    this.player.previousTrack();\r\n  }\r\n\r\n  onPlayClick() {\r\n    this.player.togglePlay();\r\n  }\r\n\r\n  onNextClick() {\r\n    this.player.nextTrack();\r\n  }\r\n\r\n  // Automatically play music here\r\n  transferPlaybackHere() {\r\n    const { deviceId, token } = this.state;\r\n\r\n    fetch('https://api.spotify.com/v1/me/player', {\r\n      method: 'PUT',\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        device_ids: [deviceId],\r\n        play: true\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      token,\r\n      loggedIn,\r\n      artistName,\r\n      trackName,\r\n      albumName,\r\n      error,\r\n      position,\r\n      duration,\r\n      playing\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <h2>Now Playing</h2>\r\n          <p>A Spotify Web Playback API Demo.</p>\r\n        </div>\r\n\r\n        {error && <p>Error: {error}</p>}\r\n\r\n        {loggedIn ? (\r\n          <div>\r\n            <p>Artist: {artistName}</p>\r\n            <p>Track: {trackName}</p>\r\n            <p>Album: {albumName}</p>\r\n            <p>\r\n              <button onClick={() => this.onPrevCick()}>Previous</button>\r\n              <button onClick={() => this.onPlayClick()}>\r\n                {playing ? 'Pause' : 'Play'}\r\n              </button>\r\n              <button onClick={() => this.onNextClick()}>Next</button>\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <p className=\"App-intro\">\r\n              Enter your Spotify access token. Get it from{' '}\r\n              <a href=\"https://beta.developer.spotify.com/documentation/web-playback-sdk/quick-start/#authenticating-with-spotify\">\r\n                here\r\n              </a>\r\n              .\r\n            </p>\r\n            <p>\r\n              <input\r\n                type=\"text\"\r\n                value={token}\r\n                onChange={e => this.setState({ token: e.target.value })}\r\n              />\r\n            </p>\r\n            <p>\r\n              <button onClick={() => this.handleLogin()}>Go</button>\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}